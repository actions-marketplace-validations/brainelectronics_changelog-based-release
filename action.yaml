name: 'Hello World with changelog2version'
description: 'Greet someone and install changelog2version'
inputs:
  who-to-greet:  # id of input
    description: 'Who to greet'
    required: true
    default: 'World'
  github-token:
    description: 'GitHub token for release'
    required: true
  draft-release:
    description: 'Is this a draft release'
    required: true
    default: false
  prerelease:
    description: 'Is this a Prerelease'
    required: true
    default: false
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}
  installed-packages:
    description: "Installed Python packages"
    value: "${{ steps.installed-packages.outputs.INSTALLED_PACKAGES }}"
  latest-description:
    description: "Content of latest changelog entry"
    value: "${{ steps.parse-changelog.outputs.LATEST_DESCRIPTION }}"
  latest-version:
    description: "Latest changelog version"
    value: ${{ steps.parse-changelog.outputs.LATEST_VERSION }}
runs:
  using: "composite"
  steps:
    - name: Install required packages
      run: pip install -r requirements.txt
      shell: bash
    - name: Say Hello to the user
      run: echo Hello ${{ inputs.who-to-greet }}.
      shell: bash
    - name: Generate random number
      id: random-number-generator
      run: echo "random-number=$(echo $RANDOM)" >> $GITHUB_OUTPUT
      shell: bash
    - name: Collect installed packages
      id: installed-packages
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
      run: |
        echo 'INSTALLED_PACKAGES<<"EOT"' >> $GITHUB_OUTPUT
        pip freeze >> $GITHUB_OUTPUT
        echo '"EOT"' >> $GITHUB_OUTPUT
      shell: bash
    - run: echo "${{ github.action_path }}" >> $GITHUB_PATH
      shell: bash
    - name: Parse changelog
      id: parse-changelog
      run: |
        changelog2version --changelog_file changelog.md --print | python -c "import sys, json; print(json.load(sys.stdin)['info']['description'])" > latest_description.txt
        echo 'LATEST_DESCRIPTION<<"EOT"' >> $GITHUB_OUTPUT
        cat latest_description.txt >> $GITHUB_OUTPUT
        echo '"EOT"' >> $GITHUB_OUTPUT
        latest_version=$(changelog2version --changelog_file changelog.md --print | python -c "import sys, json; print(json.load(sys.stdin)['info']['version'])")
        echo "LATEST_VERSION=$latest_version" >> $GITHUB_OUTPUT
      shell: bash
    - name: Create (Pre)Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.parse-changelog.outputs.LATEST_VERSION }}-rc${{ github.run_number }}.dev${{ github.event.number }}
        release_name: ${{ steps.parse-changelog.outputs.LATEST_VERSION }}-rc${{ github.run_number }}.dev${{ github.event.number }}
        body: ${{ steps.parse-changelog.outputs.LATEST_DESCRIPTION }}
        draft: ${{ inputs.draft-release }}
        prerelease: ${{ inputs.prerelease }}
    # - run: goodbye.sh
    #   shell: bash
